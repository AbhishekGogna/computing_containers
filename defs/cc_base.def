Bootstrap: docker
From: nvidia/cuda:11.6.2-cudnn8-runtime-ubuntu20.04

%help
  #baseimage from - https://gitlab.com/nvidia/container-images/cuda/-/blob/master/dist/11.6.2/ubuntu2004/runtime/cudnn8/Dockerfile

%setup
  # Runs on host. The path to the image is $SINGULARITY_ROOTFS
  # To access the instance running on the host port_2 you need a ssh tunnel from your local pc recieving data at port_1. 
  # Windows - ssh -L -N "localhost:port_1:localhost:port_2" user@host_name
  # build command - sudo singularity build containers/cc_base.sif cc_base.def > run_his/cc_base.err 2> run_his/cc_base.log

  cp_container(){
    if [ -f   "usr_scr/${1}" ]; then
      install -Dv "usr_scr/${1}" "${SINGULARITY_ROOTFS}/usr/lib/usr_scr/$1"
    else
      echo "${1} does not exist. please ensure that ${1} is present inside /usr_scr at the same location as current definition file"
      exit 1
    fi
  }
  cp_container "install_pkgs_base.R"

  # make project directory
  mkdir -p /proj

%post
  # Define variables
  export DEBIAN_FRONTEND=noninteractive
  export TZ="Europe/Berlin"
  export R_VERSION="4.0.5"
  export CRAN="https://packagemanager.rstudio.com/cran/__linux__/focal/latest"
  export LANG="en_US.UTF-8"
  export LC_ALL="en_US.UTF-8"
  export TZ="Etc/UTC"
  export JAVA_HOME="/usr/lib/jvm/java-11-openjdk-amd64"
  usr_scr_r="/usr/lib/usr_scr/install_pkgs_base.R" 
  total_cores="$(nproc)"
  available_cores="$(expr 2 + "${total_cores}" / 2)"

  # Update apt and get some core packages
  apt-get update
  apt-get install -y \
    apt-utils \
    locales \
    lsb-release \
    software-properties-common

  echo "en_US.UTF-8 UTF-8" > /etc/locale.gen
  locale-gen
  
  # Get ubuntu essentials
  UBUNTU_VERSION="$(lsb_release -sc)"
  READLINE_VERSION=8
  if [ "${UBUNTU_VERSION}" -eq "bionic" ]; then
      READLINE_VERSION=7
      exit 1
  fi
  apt-get update -y
  apt-get install -y --no-install-recommends \
    automake \
    bash-completion \
    build-essential \
    ca-certificates \
    cmake \
    curl \
    devscripts \
    emacs \
    emacs-nox \
    file \
    fonts-texgyre \
    g++ \
    gcc \
    gdebi-core \
    gfortran \
    git \
    graphviz \
    gsfonts \
    jq \
    libbz2-* \
    libbz2-dev \
    libcurl4 \
    libcurl4-openssl-dev \
    libmpfr-dev \
    libgdal-dev \
    libgit2-dev \
    libgmp-dev \
    libgraphviz-dev \
    "libicu[0-9][0-9]" \
    libicu-dev \
    libjpeg-turbo* \
    liblapack-dev \
    liblzma* \
    liblzma-dev \
    libpangocairo-* \
    libpcre2-8-0 \
    libpcre2-dev \
    libpng16* \
    "libreadline${READLINE_VERSION}" \
    libpq-dev \
    libssl-dev \
    libtiff* \
    libtool \
    libudunits2-dev \
    libxml2 \
    libxml2-dev \
    m4 \
    make \
    nano \
    openssh-client \
    openssh-server \
    openjdk-11-jdk \
    openjdk-11-jre \
    perl \
    psmisc \
    python3.8-dev \
    python3.8-venv \
    python3-pip \
    python3-wheel \
    systemd \
    unzip \
    vim \
    wget \
    zip \
    zlib1g \
    zlib1g-dev

  # Install R
  ## Configure default locale
  LANG=${LANG:-"en_US.UTF-8"}
  /usr/sbin/locale-gen --lang "${LANG}"
  /usr/sbin/update-locale --reset LANG="${LANG}"
  
  ## List of dependencies will will get removed at the end of R installation  
  BUILDDEPS="libcairo2-dev \
      libpango1.0-dev \
      libjpeg-dev \
      libpng-dev \
      libreadline-dev \
      libtiff5-dev \
      libx11-dev \
      libxt-dev \
      rsync \
      subversion \
      tcl-dev \
      tk-dev \
      texinfo \
      texlive-extra-utils \
      texlive-fonts-recommended \
      texlive-fonts-extra \
      texlive-latex-recommended \
      texlive-latex-extra \
      x11proto-core-dev \
      xauth \
      xfonts-base \
      xvfb"
    
  apt-get install -y --no-install-recommends ${BUILDDEPS}
  
  ## Download R from 0-Cloud CRAN mirror or CRAN
  download_r_src() {
      wget -q "https://cloud.r-project.org/src/$1" -O "R.tar.gz" ||
          wget -q "https://cran.r-project.org/src/$1" -O "R.tar.gz"
  }
  download_r_src "base/R-${R_VERSION%%.*}/R-${R_VERSION}.tar.gz"
  
  ## Extract tarball and enter into it
  tar xzf "R.tar.gz"
  cd R-*/
  
  ## Configure R
  R_PAPERSIZE=letter \
    R_BATCHSAVE="--no-save --no-restore" \
    R_BROWSER=xdg-open \
    PAGER=/usr/bin/pager \
    PERL=/usr/bin/perl \
    R_UNZIPCMD=/usr/bin/unzip \
    R_ZIPCMD=/usr/bin/zip \
    R_PRINTCMD=/usr/bin/lpr \
    LIBnn=lib \
    AWK=/usr/bin/awk \
    CFLAGS="-g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g" \
    CXXFLAGS="-g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g" \
    ./configure --enable-R-shlib \
    --enable-memory-profiling \
    --enable-BLAS-shlib \
    --with-readline \
    --with-tcltk \
    --with-lapack \
    --with-recommended-packages
  
  ## Install R  
  make -j "${available_cores}"
  make install
  make clean
<<<<<<< HEAD
  
  ## Install rJava
  apt-get update -y
  apt-get install -y --no-install-recommends r-cran-rjava
=======
	
  ## Configure R for rJava
  R CMD javareconf
>>>>>>> 4d32f349c7fad1ce9aa819f11aa8f9e51eb64759
  
  ## Install base packages
  if [ -x "${usr_scr_r}" ]; then
    Rscript "${usr_scr_r}" "${available_cores}"
  else
      echo "${usr_scr_r} either does not exist or has no execute permissions. Installing base pkgs was unsuccessful"
      exit 1
  fi
  
  ## Clean up from R source install
  cd ..
  rm -rf R-*/
  rm -rf "R.tar.gz"
  
  # Clean up general
  apt-get remove --purge -y ${BUILDDEPS}
  apt-get autoremove -y
  apt-get autoclean -y
  rm -rf /var/lib/apt/lists/*
  apt-get clean -y

%environment
  # Add CUDA paths
  PATH=/usr/local/cuda-11.6/bin${PATH:+:${PATH}}
  LD_LIBRARY_PATH=/usr/local/cuda-11.6/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}
  
  # Add R paths
  export LC_ALL="en_US.UTF-8"
  
  # Java paths
  export JAVA_HOME="/usr/lib/jvm/java-11-openjdk-amd64"
  
%runscript
  #Executes when the "singularity run" command is used
  #Useful when you want the container to run as an executable

%apprun python3
  exec python3 "${@}"
  
%apprun R
  exec R "${@}"
  
%apprun Rscript
  exec Rscript "${@}"
	
%test
  #Test script to verify that the image is built and running correctly
